package com.shadow.core.buddy.handler;

import static net.bytebuddy.jar.asm.Opcodes.*;

import com.shadow.utils.*;
import net.bytebuddy.jar.asm.*;

public class SpringJobBuddyHandler extends AbstractBuddyHandler {

    @Override
    public void setThreadLocalMethodBody(MethodVisitor methodVisitor) {
        Label label0 = new Label();
        Label label1 = new Label();
        Label label2 = new Label();
        methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
        Label label3 = new Label();
        methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
        methodVisitor.visitLabel(label0);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_2);
        Label label4 = new Label();
        methodVisitor.visitJumpInsn(IFNULL, label4);
        methodVisitor.visitFieldInsn(GETSTATIC, getThreadLocalInnerClassName(), getThreadLocalFieldName(), BaseConstants.THREADLOCAL_TYPE.getDescriptor());
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.THREADLOCAL_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_SET, BaseConstants.V_O, false);
        Label label5 = new Label();
        methodVisitor.visitJumpInsn(GOTO, label5);
        methodVisitor.visitLabel(label4);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_3);
        methodVisitor.visitJumpInsn(IFNULL, label5);
        methodVisitor.visitFieldInsn(GETSTATIC, getThreadLocalInnerClassName(), getThreadLocalFieldName(), BaseConstants.THREADLOCAL_TYPE.getDescriptor());
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.THREADLOCAL_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_SET, BaseConstants.V_O, false);
        methodVisitor.visitLabel(label5);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getDescriptor());
        methodVisitor.visitLdcInsn(Type.getType(SpringConstants.SPRING_SCHEDULEDANNOTATIONBEANPOSTPROCESSOR_TYPE.getDescriptor()));
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETBEAN, BaseConstants.O_C_, true);
        methodVisitor.visitTypeInsn(CHECKCAST, SpringConstants.SPRING_SCHEDULEDANNOTATIONBEANPOSTPROCESSOR_TYPE.getInternalName());
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_4);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_SCHEDULEDANNOTATIONBEANPOSTPROCESSOR_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETSCHEDULEDTASKS, BaseConstants.SET_, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_5);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_5);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, BaseConstants.SET_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_ITERATOR, BaseConstants.ITERATOR_, true);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_6);
        Label label6 = new Label();
        methodVisitor.visitLabel(label6);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_6);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, BaseConstants.ITERATOR_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_HASNEXT, BaseConstants.Z_, true);
        Label label7 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label7);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_6);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, BaseConstants.ITERATOR_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_NEXT, BaseConstants.O_, true);
        methodVisitor.visitTypeInsn(CHECKCAST, SpringConstants.SPRING_SCHEDULEDTASK_TYPE.getInternalName());
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_7);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_7);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_SCHEDULEDTASK_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETTASK, SpringConstants.TASK_, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_8);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_8);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_TASK_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETRUNNABLE, BaseConstants.RUNNABLE_, false);
        methodVisitor.visitTypeInsn(CHECKCAST, SpringConstants.SPRING_SCHEDULEDMETHODRUNNABLE_TYPE.getInternalName());
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_9);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_9);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_SCHEDULEDMETHODRUNNABLE_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETMETHOD, BaseConstants.REFLECT_METHOD_, false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.REFLECT_METHOD_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETNAME, BaseConstants.S_, false);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.STRING_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_EQUALS, BaseConstants.Z_O, false);
        Label label8 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label8);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_9);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_SCHEDULEDMETHODRUNNABLE_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_RUN, BaseConstants.V_, false);
        methodVisitor.visitJumpInsn(GOTO, label7);
        methodVisitor.visitLabel(label8);
        methodVisitor.visitJumpInsn(GOTO, label6);
        methodVisitor.visitLabel(label7);
        methodVisitor.visitLdcInsn(CommonConstants.SPRING_SUCCESS);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_6);
        methodVisitor.visitLabel(label1);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_2);
        Label label9 = new Label();
        methodVisitor.visitJumpInsn(IFNONNULL, label9);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_3);
        Label label10 = new Label();
        methodVisitor.visitJumpInsn(IFNULL, label10);
        methodVisitor.visitLabel(label9);
        methodVisitor.visitFieldInsn(GETSTATIC, getThreadLocalInnerClassName(), getThreadLocalFieldName(), BaseConstants.THREADLOCAL_TYPE.getDescriptor());
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.THREADLOCAL_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_REMOVE, BaseConstants.V_, false);
        methodVisitor.visitLabel(label10);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_6);
        methodVisitor.visitInsn(ARETURN);
        methodVisitor.visitLabel(label2);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_10);
        methodVisitor.visitLabel(label3);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_2);
        Label label11 = new Label();
        methodVisitor.visitJumpInsn(IFNONNULL, label11);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_3);
        Label label12 = new Label();
        methodVisitor.visitJumpInsn(IFNULL, label12);
        methodVisitor.visitLabel(label11);
        methodVisitor.visitFieldInsn(GETSTATIC, getThreadLocalInnerClassName(), getThreadLocalFieldName(), BaseConstants.THREADLOCAL_TYPE.getDescriptor());
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.THREADLOCAL_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_REMOVE, BaseConstants.V_, false);
        methodVisitor.visitLabel(label12);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_10);
        methodVisitor.visitInsn(ATHROW);
    }

    @Override
    public void setNormalMethodBody(MethodVisitor methodVisitor) {
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getDescriptor());
        methodVisitor.visitLdcInsn(Type.getType(SpringConstants.SPRING_SCHEDULEDANNOTATIONBEANPOSTPROCESSOR_TYPE.getDescriptor()));
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETBEAN, BaseConstants.O_C_, true);
        methodVisitor.visitTypeInsn(CHECKCAST, SpringConstants.SPRING_SCHEDULEDANNOTATIONBEANPOSTPROCESSOR_TYPE.getInternalName());
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_4);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_SCHEDULEDANNOTATIONBEANPOSTPROCESSOR_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETSCHEDULEDTASKS, BaseConstants.SET_, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_5);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_5);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, BaseConstants.SET_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_ITERATOR, BaseConstants.ITERATOR_, true);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_6);
        Label label0 = new Label();
        methodVisitor.visitLabel(label0);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_6);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, BaseConstants.ITERATOR_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_HASNEXT, BaseConstants.Z_, true);
        Label label1 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label1);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_6);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, BaseConstants.ITERATOR_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_NEXT, BaseConstants.O_, true);
        methodVisitor.visitTypeInsn(CHECKCAST, SpringConstants.SPRING_SCHEDULEDTASK_TYPE.getInternalName());
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_7);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_7);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_SCHEDULEDTASK_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETTASK, SpringConstants.TASK_, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_8);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_8);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_TASK_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETRUNNABLE, BaseConstants.RUNNABLE_, false);
        methodVisitor.visitTypeInsn(CHECKCAST, SpringConstants.SPRING_SCHEDULEDMETHODRUNNABLE_TYPE.getInternalName());
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_9);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_9);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_SCHEDULEDMETHODRUNNABLE_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETMETHOD, BaseConstants.REFLECT_METHOD_, false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.REFLECT_METHOD_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETNAME, BaseConstants.S_, false);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.STRING_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_EQUALS, BaseConstants.Z_O, false);
        Label label2 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label2);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_9);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_SCHEDULEDMETHODRUNNABLE_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_RUN, BaseConstants.V_, false);
        methodVisitor.visitJumpInsn(GOTO, label1);
        methodVisitor.visitLabel(label2);
        methodVisitor.visitJumpInsn(GOTO, label0);
        methodVisitor.visitLabel(label1);
        methodVisitor.visitLdcInsn(CommonConstants.SPRING_SUCCESS);
        methodVisitor.visitInsn(ARETURN);
    }


    @Override
    public void setCrudMethodBody(MethodVisitor methodVisitor) {
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitVarInsn(ALOAD, 0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), "Lorg/springframework/context/ApplicationContext;");
        methodVisitor.visitLdcInsn(Type.getType("Lorg/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor;"));
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/springframework/context/ApplicationContext", "getBean", "(Ljava/lang/Class;)Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor");
        methodVisitor.visitVarInsn(ASTORE, 5);
        methodVisitor.visitLdcInsn(Type.getType("Lorg/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor;"));
        methodVisitor.visitLdcInsn("scheduledTasks");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
        methodVisitor.visitVarInsn(ASTORE, 6);
        methodVisitor.visitVarInsn(ALOAD, 6);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V", false);
        methodVisitor.visitVarInsn(ALOAD, 6);
        methodVisitor.visitVarInsn(ALOAD, 5);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
        methodVisitor.visitTypeInsn(CHECKCAST, "java/util/Map");
        methodVisitor.visitVarInsn(ASTORE, 7);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 8);
        methodVisitor.visitTypeInsn(NEW, "java/util/HashSet");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/HashSet", "<init>", "()V", false);
        methodVisitor.visitVarInsn(ASTORE, 9);
        methodVisitor.visitLdcInsn(Type.getType("Lorg/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor;"));
        methodVisitor.visitLdcInsn("registrar");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
        methodVisitor.visitVarInsn(ASTORE, 10);
        methodVisitor.visitVarInsn(ALOAD, 10);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V", false);
        methodVisitor.visitVarInsn(ALOAD, 10);
        methodVisitor.visitVarInsn(ALOAD, 5);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/springframework/scheduling/config/ScheduledTaskRegistrar");
        methodVisitor.visitVarInsn(ASTORE, 11);
        methodVisitor.visitTypeInsn(NEW, "java/util/HashMap");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
        methodVisitor.visitVarInsn(ASTORE, 12);
        methodVisitor.visitVarInsn(ALOAD, 7);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;", true);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true);
        methodVisitor.visitVarInsn(ASTORE, 13);
        Label label0 = new Label();
        methodVisitor.visitLabel(label0);
        methodVisitor.visitVarInsn(ALOAD, 13);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
        Label label1 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label1);
        methodVisitor.visitVarInsn(ALOAD, 13);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "java/util/Map$Entry");
        methodVisitor.visitVarInsn(ASTORE, 14);
        methodVisitor.visitVarInsn(ALOAD, 14);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getValue", "()Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "java/util/Set");
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true);
        methodVisitor.visitVarInsn(ASTORE, 15);
        Label label2 = new Label();
        methodVisitor.visitLabel(label2);
        methodVisitor.visitVarInsn(ALOAD, 15);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
        Label label3 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label3);
        methodVisitor.visitVarInsn(ALOAD, 15);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/springframework/scheduling/config/ScheduledTask");
        methodVisitor.visitVarInsn(ASTORE, 16);
        methodVisitor.visitVarInsn(ALOAD, 16);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/ScheduledTask", "getTask", "()Lorg/springframework/scheduling/config/Task;", false);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/springframework/scheduling/config/CronTask");
        methodVisitor.visitVarInsn(ASTORE, 17);
        methodVisitor.visitVarInsn(ALOAD, 17);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/CronTask", "getRunnable", "()Ljava/lang/Runnable;", false);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/springframework/scheduling/support/ScheduledMethodRunnable");
        methodVisitor.visitVarInsn(ASTORE, 18);
        methodVisitor.visitVarInsn(ALOAD, 12);
        methodVisitor.visitVarInsn(ALOAD, 18);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/support/ScheduledMethodRunnable", "getMethod", "()Ljava/lang/reflect/Method;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "getName", "()Ljava/lang/String;", false);
        methodVisitor.visitVarInsn(ALOAD, 17);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/CronTask", "getExpression", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitVarInsn(ALOAD, 18);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/support/ScheduledMethodRunnable", "getMethod", "()Ljava/lang/reflect/Method;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "getName", "()Ljava/lang/String;", false);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
        Label label4 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label4);
        methodVisitor.visitVarInsn(ALOAD, 14);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getKey", "()Ljava/lang/Object;", true);
        methodVisitor.visitVarInsn(ASTORE, 8);
        methodVisitor.visitVarInsn(ALOAD, 9);
        methodVisitor.visitVarInsn(ALOAD, 14);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map$Entry", "getValue", "()Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "java/util/Collection");
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "addAll", "(Ljava/util/Collection;)Z", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitVarInsn(ILOAD, 1);
        Label label5 = new Label();
        Label label6 = new Label();
        Label label7 = new Label();
        Label label8 = new Label();
        methodVisitor.visitTableSwitchInsn(0, 2, label8, new Label[]{label5, label6, label7});
        methodVisitor.visitLabel(label5);
        methodVisitor.visitVarInsn(ALOAD, 16);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/ScheduledTask", "cancel", "()V", false);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitJumpInsn(GOTO, label4);
        methodVisitor.visitLabel(label6);
        methodVisitor.visitVarInsn(ALOAD, 16);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/ScheduledTask", "cancel", "()V", false);
        methodVisitor.visitVarInsn(ALOAD, 9);
        methodVisitor.visitVarInsn(ALOAD, 16);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "remove", "(Ljava/lang/Object;)Z", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitVarInsn(ALOAD, 11);
        methodVisitor.visitTypeInsn(NEW, "org/springframework/scheduling/config/CronTask");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitVarInsn(ALOAD, 17);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/CronTask", "getRunnable", "()Ljava/lang/Runnable;", false);
        methodVisitor.visitVarInsn(ALOAD, 3);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/springframework/scheduling/config/CronTask", "<init>", "(Ljava/lang/Runnable;Ljava/lang/String;)V", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/ScheduledTaskRegistrar", "scheduleCronTask", "(Lorg/springframework/scheduling/config/CronTask;)Lorg/springframework/scheduling/config/ScheduledTask;", false);
        methodVisitor.visitVarInsn(ASTORE, 16);
        methodVisitor.visitVarInsn(ALOAD, 9);
        methodVisitor.visitVarInsn(ALOAD, 16);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "add", "(Ljava/lang/Object;)Z", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitJumpInsn(GOTO, label4);
        methodVisitor.visitLabel(label7);
        methodVisitor.visitVarInsn(ALOAD, 16);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/ScheduledTask", "cancel", "()V", false);
        methodVisitor.visitVarInsn(ALOAD, 9);
        methodVisitor.visitVarInsn(ALOAD, 16);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "remove", "(Ljava/lang/Object;)Z", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitVarInsn(ALOAD, 11);
        methodVisitor.visitTypeInsn(NEW, "org/springframework/scheduling/config/CronTask");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitVarInsn(ALOAD, 17);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/CronTask", "getRunnable", "()Ljava/lang/Runnable;", false);
        methodVisitor.visitVarInsn(ALOAD, 17);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/CronTask", "getExpression", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/springframework/scheduling/config/CronTask", "<init>", "(Ljava/lang/Runnable;Ljava/lang/String;)V", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/config/ScheduledTaskRegistrar", "scheduleCronTask", "(Lorg/springframework/scheduling/config/CronTask;)Lorg/springframework/scheduling/config/ScheduledTask;", false);
        methodVisitor.visitVarInsn(ASTORE, 16);
        methodVisitor.visitVarInsn(ALOAD, 9);
        methodVisitor.visitVarInsn(ALOAD, 16);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "add", "(Ljava/lang/Object;)Z", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitJumpInsn(GOTO, label4);
        methodVisitor.visitLabel(label8);
        methodVisitor.visitVarInsn(ALOAD, 12);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitLabel(label4);
        methodVisitor.visitJumpInsn(GOTO, label2);
        methodVisitor.visitLabel(label3);
        methodVisitor.visitJumpInsn(GOTO, label0);
        methodVisitor.visitLabel(label1);
        methodVisitor.visitVarInsn(ALOAD, 8);
        Label label9 = new Label();
        methodVisitor.visitJumpInsn(IFNULL, label9);
        methodVisitor.visitVarInsn(ALOAD, 7);
        methodVisitor.visitVarInsn(ALOAD, 8);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
        methodVisitor.visitJumpInsn(IFNULL, label9);
        methodVisitor.visitVarInsn(ALOAD, 7);
        methodVisitor.visitVarInsn(ALOAD, 8);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitVarInsn(ALOAD, 7);
        methodVisitor.visitVarInsn(ALOAD, 8);
        methodVisitor.visitVarInsn(ALOAD, 9);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitLabel(label9);
        methodVisitor.visitVarInsn(ALOAD, 6);
        methodVisitor.visitVarInsn(ALOAD, 5);
        methodVisitor.visitVarInsn(ALOAD, 7);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        methodVisitor.visitVarInsn(ALOAD, 4);
        methodVisitor.visitInsn(ARETURN);
    }
}
