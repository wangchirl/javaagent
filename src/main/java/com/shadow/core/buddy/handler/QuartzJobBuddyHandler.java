package com.shadow.core.buddy.handler;

import static net.bytebuddy.jar.asm.Opcodes.*;

import com.shadow.utils.*;
import net.bytebuddy.jar.asm.*;

public class QuartzJobBuddyHandler extends AbstractBuddyHandler {

    @Override
    public void setThreadLocalMethodBody(MethodVisitor methodVisitor) {
        methodVisitor.visitTypeInsn(NEW, QuartzConstants.QUARTZ_JOBDATAMAP_TYPE.getInternalName());
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, QuartzConstants.QUARTZ_JOBDATAMAP_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_INIT, BaseConstants.V_, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_4);
        methodVisitor.visitLdcInsn(CommonConstants.CONST_PARAMS);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, QuartzConstants.QUARTZ_JOBDATAMAP_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_PUT, BaseConstants.V_SS, false);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_4);
        methodVisitor.visitLdcInsn(CommonConstants.CONST_BODY);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, QuartzConstants.QUARTZ_JOBDATAMAP_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_PUT, BaseConstants.O_SO, false);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getDescriptor());
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_1);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETBEAN, BaseConstants.O_S, true);
        methodVisitor.visitTypeInsn(CHECKCAST, QuartzConstants.QUARTZ_CRONTRIGGERIMPL_TYPE.getInternalName());
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_5);
        methodVisitor.visitTypeInsn(NEW, QuartzConstants.QUARTZ_JOBKEY_TYPE.getInternalName());
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_5);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, QuartzConstants.QUARTZ_CRONTRIGGERIMPL_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETJOBNAME, BaseConstants.S_, false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, QuartzConstants.QUARTZ_JOBKEY_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_INIT, BaseConstants.V_S, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_6);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getDescriptor());
        methodVisitor.visitLdcInsn(Type.getType(SpringConstants.SPRING_QUARTZ_SCHEDULERFACTORYBEAN_TYPE.getDescriptor()));
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETBEAN, BaseConstants.O_C_, true);
        methodVisitor.visitTypeInsn(CHECKCAST, SpringConstants.SPRING_QUARTZ_SCHEDULERFACTORYBEAN_TYPE.getInternalName());
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_QUARTZ_SCHEDULERFACTORYBEAN_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETSCHEDULER, QuartzConstants.SCHEDULER_, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_7);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_7);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_6);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_4);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, QuartzConstants.QUARTZ_SCHEDULER_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_TRIGGERJOB, QuartzConstants.V_JOBKEY_JOBDATAMAP, true);
        methodVisitor.visitLdcInsn(CommonConstants.QUARTZ_SUCCESS);
        methodVisitor.visitInsn(ARETURN);
    }

    @Override
    public void setNormalMethodBody(MethodVisitor methodVisitor) {
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getDescriptor());
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_1);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETBEAN, BaseConstants.O_S, true);
        methodVisitor.visitTypeInsn(CHECKCAST, QuartzConstants.QUARTZ_CRONTRIGGERIMPL_TYPE.getInternalName());
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitTypeInsn(NEW, QuartzConstants.QUARTZ_JOBKEY_TYPE.getInternalName());
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_4);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, QuartzConstants.QUARTZ_CRONTRIGGERIMPL_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETJOBNAME, BaseConstants.S_, false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, QuartzConstants.QUARTZ_JOBKEY_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_INIT, BaseConstants.V_S, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_5);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getDescriptor());
        methodVisitor.visitLdcInsn(Type.getType(SpringConstants.SPRING_QUARTZ_SCHEDULERFACTORYBEAN_TYPE.getDescriptor()));
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, SpringConstants.SPRING_APPLICATION_CONTEXT_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETBEAN, BaseConstants.O_C_, true);
        methodVisitor.visitTypeInsn(CHECKCAST, SpringConstants.SPRING_QUARTZ_SCHEDULERFACTORYBEAN_TYPE.getInternalName());
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, SpringConstants.SPRING_QUARTZ_SCHEDULERFACTORYBEAN_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETSCHEDULER, QuartzConstants.SCHEDULER_, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_6);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_6);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_5);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, QuartzConstants.QUARTZ_SCHEDULER_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_TRIGGERJOB, QuartzConstants.V_JOBKEY, true);
        methodVisitor.visitLdcInsn(CommonConstants.QUARTZ_SUCCESS);
        methodVisitor.visitInsn(ARETURN);
    }

    @Override
    public void setCrudMethodBody(MethodVisitor methodVisitor) {
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_2);
        methodVisitor.visitLdcInsn(CommonConstants.AT);
        // "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;"
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, BaseConstants.STRING_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_SPLIT, BaseConstants.AS_S, false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_5);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_5);
        methodVisitor.visitInsn(ARRAYLENGTH);
        methodVisitor.visitInsn(ICONST_2);
        Label label0 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_5);
        methodVisitor.visitInsn(ICONST_0);
        methodVisitor.visitInsn(AALOAD);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_6);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_5);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitInsn(AALOAD);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_7);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), "Lorg/springframework/context/ApplicationContext;");
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_6);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/springframework/context/ApplicationContext", "getBean", "(Ljava/lang/String;)Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/quartz/impl/triggers/CronTriggerImpl");
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_8);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_0);
        methodVisitor.visitFieldInsn(GETFIELD, getInnerClassName(), getArgs().get(CommonConstants.IOC_FIELD_NAME), "Lorg/springframework/context/ApplicationContext;");
        methodVisitor.visitLdcInsn(Type.getType("Lorg/springframework/scheduling/quartz/SchedulerFactoryBean;"));
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/springframework/context/ApplicationContext", "getBean", "(Ljava/lang/Class;)Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/springframework/scheduling/quartz/SchedulerFactoryBean");
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_9);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_9);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/springframework/scheduling/quartz/SchedulerFactoryBean", "getScheduler", "()Lorg/quartz/Scheduler;", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_10);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_7);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_8);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/quartz/impl/triggers/CronTriggerImpl", "getJobName", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
        methodVisitor.visitJumpInsn(IFEQ, label0);
        methodVisitor.visitTypeInsn(NEW, "org/quartz/JobKey");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_8);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/quartz/impl/triggers/CronTriggerImpl", "getJobName", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/quartz/JobKey", "<init>", "(Ljava/lang/String;)V", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_11);
        methodVisitor.visitVarInsn(ILOAD, IndexConstants.INDEX_1);
        Label label1 = new Label();
        Label label2 = new Label();
        Label label3 = new Label();
        Label label4 = new Label();
        methodVisitor.visitTableSwitchInsn(IndexConstants.INDEX_0, IndexConstants.INDEX_2, label4, new Label[] { label1, label2, label3 });
        methodVisitor.visitLabel(label1);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_10);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_11);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/quartz/Scheduler", "pauseJob", "(Lorg/quartz/JobKey;)V", true);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitJumpInsn(GOTO, label0);
        methodVisitor.visitLabel(label2);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_8);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/quartz/impl/triggers/CronTriggerImpl", "setCronExpression", "(Ljava/lang/String;)V", false);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_10);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_8);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/quartz/impl/triggers/CronTriggerImpl", "getKey", "()Lorg/quartz/TriggerKey;", false);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_8);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/quartz/Scheduler", "rescheduleJob", "(Lorg/quartz/TriggerKey;Lorg/quartz/Trigger;)Ljava/util/Date;", true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitJumpInsn(GOTO, label0);
        methodVisitor.visitLabel(label3);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_10);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_11);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/quartz/Scheduler", "resumeJob", "(Lorg/quartz/JobKey;)V", true);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitJumpInsn(GOTO, label0);
        methodVisitor.visitLabel(label4);
        methodVisitor.visitTypeInsn(NEW, "java/util/HashMap");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_12);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_10);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "org/quartz/impl/matchers/GroupMatcher", "anyGroup", "()Lorg/quartz/impl/matchers/GroupMatcher;", false);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/quartz/Scheduler", "getTriggerKeys", "(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;", true);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_13);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_13);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_14);
        Label label5 = new Label();
        methodVisitor.visitLabel(label5);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_14);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
        Label label6 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label6);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_14);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/quartz/TriggerKey");
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_15);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_10);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_15);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/quartz/Scheduler", "getTrigger", "(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger;", true);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_16);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_16);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/quartz/Trigger", "getTriggerBuilder", "()Lorg/quartz/TriggerBuilder;", true);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_17);
        methodVisitor.visitLdcInsn(Type.getType("Lorg/quartz/TriggerBuilder;"));
        methodVisitor.visitLdcInsn("scheduleBuilder");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_18);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_18);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V", false);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_18);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_17);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/quartz/CronScheduleBuilder");
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_19);
        methodVisitor.visitLdcInsn(Type.getType("Lorg/quartz/CronScheduleBuilder;"));
        methodVisitor.visitLdcInsn("cronExpression");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_18);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_18);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V", false);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_18);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_19);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
        methodVisitor.visitTypeInsn(CHECKCAST, "org/quartz/CronExpression");
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_20);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_20);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/quartz/CronExpression", "getCronExpression", "()Ljava/lang/String;", false);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_3);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_12);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_16);
        // "org/quartz/Trigger", "getJobKey", "()Lorg/quartz/JobKey;"
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, QuartzConstants.QUARTZ_TRIGGER_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GET_JOB_KEY, QuartzConstants.JOBKEY_, true);
        // "org/quartz/JobKey", "getName", "()Ljava/lang/String;"
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, QuartzConstants.QUARTZ_JOBKEY_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_GETNAME, BaseConstants.S_, false);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_3);
        // "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, BaseConstants.MAP_TYPE.getInternalName(), MethodNameConstants.METHOD_NAME_PUT, BaseConstants.O_O_O, true);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitJumpInsn(GOTO, label5);
        methodVisitor.visitLabel(label6);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_12);
        methodVisitor.visitVarInsn(ASTORE, IndexConstants.INDEX_4);
        methodVisitor.visitLabel(label0);
        methodVisitor.visitVarInsn(ALOAD, IndexConstants.INDEX_4);
        methodVisitor.visitInsn(ARETURN);
    }
}
